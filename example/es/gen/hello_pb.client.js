// @generated by protobuf-ts 2.11.1 with parameter output_javascript_es2020,long_type_number,add_pb_suffix,client_generic,server_none
// @generated from protobuf file "hello.proto" (package "example", syntax proto3)
// tslint:disable
import { HelloService } from "./hello_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service example.HelloService
 */
export class HelloServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = HelloService.typeName;
        this.methods = HelloService.methods;
        this.options = HelloService.options;
    }
    /**
     * @generated from protobuf rpc: SayHello
     */
    sayHello(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * A server-to-client streaming RPC.
     *
     * Obtains the Features available within the given Rectangle.  Results are
     * streamed rather than returned at once (e.g. in a response message with a
     * repeated field), as the rectangle may cover a large area and contain a
     * huge number of features.
     *
     * @generated from protobuf rpc: ListFeatures
     */
    listFeatures(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * A client-to-server streaming RPC.
     *
     * Accepts a stream of Points on a route being traversed, returning a
     * RouteSummary when traversal is completed.
     *
     * @generated from protobuf rpc: RecordRoute
     */
    recordRoute(options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("clientStreaming", this._transport, method, opt);
    }
    /**
     * A Bidirectional streaming RPC.
     *
     * Accepts a stream of RouteNotes sent while a route is being traversed,
     * while receiving other RouteNotes (e.g. from other users).
     *
     * @generated from protobuf rpc: RouteChat
     */
    routeChat(options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("duplex", this._transport, method, opt);
    }
}
