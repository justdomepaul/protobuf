// @generated by protobuf-ts 2.11.1 with parameter output_javascript_es2020,long_type_number,add_pb_suffix,client_generic,server_none
// @generated from protobuf file "hello.proto" (package "example", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Decimal } from "./google/type/decimal_pb";
import { Timestamp } from "./google/protobuf/timestamp_pb";
/**
 * @generated from protobuf message example.HelloRequest
 */
export interface HelloRequest {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: int32 age = 2
     */
    age: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_time = 3
     */
    createdTime?: Timestamp;
    /**
     * @generated from protobuf field: google.type.Decimal amount = 4
     */
    amount?: Decimal;
}
/**
 * @generated from protobuf message example.HelloReply
 */
export interface HelloReply {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
}
/**
 * Points are represented as latitude-longitude pairs in the E7 representation
 * (degrees multiplied by 10**7 and rounded to the nearest integer).
 * Latitudes should be in the range +/- 90 degrees and longitude should be in
 * the range +/- 180 degrees (inclusive).
 *
 * @generated from protobuf message example.Point
 */
export interface Point {
    /**
     * @generated from protobuf field: int32 latitude = 1
     */
    latitude: number;
    /**
     * @generated from protobuf field: int32 longitude = 2
     */
    longitude: number;
}
/**
 * A latitude-longitude rectangle, represented as two diagonally opposite
 * points "lo" and "hi".
 *
 * @generated from protobuf message example.Rectangle
 */
export interface Rectangle {
    /**
     * One corner of the rectangle.
     *
     * @generated from protobuf field: example.Point lo = 1
     */
    lo?: Point;
    /**
     * The other corner of the rectangle.
     *
     * @generated from protobuf field: example.Point hi = 2
     */
    hi?: Point;
}
/**
 * A feature names something at a given point.
 *
 * If a feature could not be named, the name is empty.
 *
 * @generated from protobuf message example.Feature
 */
export interface Feature {
    /**
     * The name of the feature.
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * The point where the feature is detected.
     *
     * @generated from protobuf field: example.Point location = 2
     */
    location?: Point;
}
/**
 * A RouteNote is a message sent while at a given point.
 *
 * @generated from protobuf message example.RouteNote
 */
export interface RouteNote {
    /**
     * The location from which the message is sent.
     *
     * @generated from protobuf field: example.Point location = 1
     */
    location?: Point;
    /**
     * The message to be sent.
     *
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * A RouteSummary is received in response to a RecordRoute rpc.
 *
 * It contains the number of individual points received, the number of
 * detected features, and the total distance covered as the cumulative sum of
 * the distance between each point.
 *
 * @generated from protobuf message example.RouteSummary
 */
export interface RouteSummary {
    /**
     * The number of points received.
     *
     * @generated from protobuf field: int32 point_count = 1
     */
    pointCount: number;
    /**
     * The number of known features passed while traversing the route.
     *
     * @generated from protobuf field: int32 feature_count = 2
     */
    featureCount: number;
    /**
     * The distance covered in metres.
     *
     * @generated from protobuf field: int32 distance = 3
     */
    distance: number;
    /**
     * The duration of the traversal in seconds.
     *
     * @generated from protobuf field: int32 elapsed_time = 4
     */
    elapsedTime: number;
}
declare class HelloRequest$Type extends MessageType<HelloRequest> {
    constructor();
    create(value?: PartialMessage<HelloRequest>): HelloRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloRequest): HelloRequest;
    internalBinaryWrite(message: HelloRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message example.HelloRequest
 */
export declare const HelloRequest: HelloRequest$Type;
declare class HelloReply$Type extends MessageType<HelloReply> {
    constructor();
    create(value?: PartialMessage<HelloReply>): HelloReply;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloReply): HelloReply;
    internalBinaryWrite(message: HelloReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message example.HelloReply
 */
export declare const HelloReply: HelloReply$Type;
declare class Point$Type extends MessageType<Point> {
    constructor();
    create(value?: PartialMessage<Point>): Point;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Point): Point;
    internalBinaryWrite(message: Point, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message example.Point
 */
export declare const Point: Point$Type;
declare class Rectangle$Type extends MessageType<Rectangle> {
    constructor();
    create(value?: PartialMessage<Rectangle>): Rectangle;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rectangle): Rectangle;
    internalBinaryWrite(message: Rectangle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message example.Rectangle
 */
export declare const Rectangle: Rectangle$Type;
declare class Feature$Type extends MessageType<Feature> {
    constructor();
    create(value?: PartialMessage<Feature>): Feature;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Feature): Feature;
    internalBinaryWrite(message: Feature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message example.Feature
 */
export declare const Feature: Feature$Type;
declare class RouteNote$Type extends MessageType<RouteNote> {
    constructor();
    create(value?: PartialMessage<RouteNote>): RouteNote;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteNote): RouteNote;
    internalBinaryWrite(message: RouteNote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message example.RouteNote
 */
export declare const RouteNote: RouteNote$Type;
declare class RouteSummary$Type extends MessageType<RouteSummary> {
    constructor();
    create(value?: PartialMessage<RouteSummary>): RouteSummary;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteSummary): RouteSummary;
    internalBinaryWrite(message: RouteSummary, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message example.RouteSummary
 */
export declare const RouteSummary: RouteSummary$Type;
/**
 * @generated ServiceType for protobuf service example.HelloService
 */
export declare const HelloService: any;
export {};
