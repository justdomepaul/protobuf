// @generated by protobuf-ts 2.11.1 with parameter output_javascript_es2020,long_type_number,add_pb_suffix,client_generic,server_none
// @generated from protobuf file "hello.proto" (package "example", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.11.1 with parameter output_javascript_es2020,long_type_number,add_pb_suffix,client_generic,server_none
// @generated from protobuf file "hello.proto" (package "example", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Decimal } from "./google/type/decimal_pb";
import { Timestamp } from "./google/protobuf/timestamp_pb";
// @generated message type with reflection information, may provide speed optimized methods
class HelloRequest$Type extends MessageType {
    constructor() {
        super("example.HelloRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "age", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "created_time", kind: "message", T: () => Timestamp },
            { no: 4, name: "amount", kind: "message", T: () => Decimal }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.age = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 age */ 2:
                    message.age = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_time */ 3:
                    message.createdTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdTime);
                    break;
                case /* google.type.Decimal amount */ 4:
                    message.amount = Decimal.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 age = 2; */
        if (message.age !== 0)
            writer.tag(2, WireType.Varint).int32(message.age);
        /* google.protobuf.Timestamp created_time = 3; */
        if (message.createdTime)
            Timestamp.internalBinaryWrite(message.createdTime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.type.Decimal amount = 4; */
        if (message.amount)
            Decimal.internalBinaryWrite(message.amount, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.HelloRequest
 */
export const HelloRequest = new HelloRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloReply$Type extends MessageType {
    constructor() {
        super("example.HelloReply", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.HelloReply
 */
export const HelloReply = new HelloReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Point$Type extends MessageType {
    constructor() {
        super("example.Point", [
            { no: 1, name: "latitude", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "longitude", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.latitude = 0;
        message.longitude = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 latitude */ 1:
                    message.latitude = reader.int32();
                    break;
                case /* int32 longitude */ 2:
                    message.longitude = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 latitude = 1; */
        if (message.latitude !== 0)
            writer.tag(1, WireType.Varint).int32(message.latitude);
        /* int32 longitude = 2; */
        if (message.longitude !== 0)
            writer.tag(2, WireType.Varint).int32(message.longitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.Point
 */
export const Point = new Point$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rectangle$Type extends MessageType {
    constructor() {
        super("example.Rectangle", [
            { no: 1, name: "lo", kind: "message", T: () => Point },
            { no: 2, name: "hi", kind: "message", T: () => Point }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* example.Point lo */ 1:
                    message.lo = Point.internalBinaryRead(reader, reader.uint32(), options, message.lo);
                    break;
                case /* example.Point hi */ 2:
                    message.hi = Point.internalBinaryRead(reader, reader.uint32(), options, message.hi);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* example.Point lo = 1; */
        if (message.lo)
            Point.internalBinaryWrite(message.lo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* example.Point hi = 2; */
        if (message.hi)
            Point.internalBinaryWrite(message.hi, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.Rectangle
 */
export const Rectangle = new Rectangle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Feature$Type extends MessageType {
    constructor() {
        super("example.Feature", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "location", kind: "message", T: () => Point }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* example.Point location */ 2:
                    message.location = Point.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* example.Point location = 2; */
        if (message.location)
            Point.internalBinaryWrite(message.location, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.Feature
 */
export const Feature = new Feature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteNote$Type extends MessageType {
    constructor() {
        super("example.RouteNote", [
            { no: 1, name: "location", kind: "message", T: () => Point },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* example.Point location */ 1:
                    message.location = Point.internalBinaryRead(reader, reader.uint32(), options, message.location);
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* example.Point location = 1; */
        if (message.location)
            Point.internalBinaryWrite(message.location, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.RouteNote
 */
export const RouteNote = new RouteNote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteSummary$Type extends MessageType {
    constructor() {
        super("example.RouteSummary", [
            { no: 1, name: "point_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "feature_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "distance", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "elapsed_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pointCount = 0;
        message.featureCount = 0;
        message.distance = 0;
        message.elapsedTime = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 point_count */ 1:
                    message.pointCount = reader.int32();
                    break;
                case /* int32 feature_count */ 2:
                    message.featureCount = reader.int32();
                    break;
                case /* int32 distance */ 3:
                    message.distance = reader.int32();
                    break;
                case /* int32 elapsed_time */ 4:
                    message.elapsedTime = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 point_count = 1; */
        if (message.pointCount !== 0)
            writer.tag(1, WireType.Varint).int32(message.pointCount);
        /* int32 feature_count = 2; */
        if (message.featureCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.featureCount);
        /* int32 distance = 3; */
        if (message.distance !== 0)
            writer.tag(3, WireType.Varint).int32(message.distance);
        /* int32 elapsed_time = 4; */
        if (message.elapsedTime !== 0)
            writer.tag(4, WireType.Varint).int32(message.elapsedTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message example.RouteSummary
 */
export const RouteSummary = new RouteSummary$Type();
/**
 * @generated ServiceType for protobuf service example.HelloService
 */
export const HelloService = new ServiceType("example.HelloService", [
    { name: "SayHello", options: { "google.api.http": { get: "/v1/example/say_hello" } }, I: HelloRequest, O: HelloReply },
    { name: "ListFeatures", serverStreaming: true, options: {}, I: Rectangle, O: Feature },
    { name: "RecordRoute", clientStreaming: true, options: {}, I: Point, O: RouteSummary },
    { name: "RouteChat", serverStreaming: true, clientStreaming: true, options: {}, I: RouteNote, O: RouteNote }
]);
