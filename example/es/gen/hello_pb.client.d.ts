// @generated by protobuf-ts 2.11.1 with parameter output_javascript_es2020,long_type_number,add_pb_suffix,client_generic,server_none
// @generated from protobuf file "hello.proto" (package "example", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { RouteNote } from "./hello_pb";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RouteSummary } from "./hello_pb";
import type { Point } from "./hello_pb";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { Feature } from "./hello_pb";
import type { Rectangle } from "./hello_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { HelloReply } from "./hello_pb";
import type { HelloRequest } from "./hello_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service example.HelloService
 */
export interface IHelloServiceClient {
    /**
     * @generated from protobuf rpc: SayHello
     */
    sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloReply>;
    /**
     * A server-to-client streaming RPC.
     *
     * Obtains the Features available within the given Rectangle.  Results are
     * streamed rather than returned at once (e.g. in a response message with a
     * repeated field), as the rectangle may cover a large area and contain a
     * huge number of features.
     *
     * @generated from protobuf rpc: ListFeatures
     */
    listFeatures(input: Rectangle, options?: RpcOptions): ServerStreamingCall<Rectangle, Feature>;
    /**
     * A client-to-server streaming RPC.
     *
     * Accepts a stream of Points on a route being traversed, returning a
     * RouteSummary when traversal is completed.
     *
     * @generated from protobuf rpc: RecordRoute
     */
    recordRoute(options?: RpcOptions): ClientStreamingCall<Point, RouteSummary>;
    /**
     * A Bidirectional streaming RPC.
     *
     * Accepts a stream of RouteNotes sent while a route is being traversed,
     * while receiving other RouteNotes (e.g. from other users).
     *
     * @generated from protobuf rpc: RouteChat
     */
    routeChat(options?: RpcOptions): DuplexStreamingCall<RouteNote, RouteNote>;
}
/**
 * @generated from protobuf service example.HelloService
 */
export declare class HelloServiceClient implements IHelloServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * @generated from protobuf rpc: SayHello
     */
    sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloReply>;
    /**
     * A server-to-client streaming RPC.
     *
     * Obtains the Features available within the given Rectangle.  Results are
     * streamed rather than returned at once (e.g. in a response message with a
     * repeated field), as the rectangle may cover a large area and contain a
     * huge number of features.
     *
     * @generated from protobuf rpc: ListFeatures
     */
    listFeatures(input: Rectangle, options?: RpcOptions): ServerStreamingCall<Rectangle, Feature>;
    /**
     * A client-to-server streaming RPC.
     *
     * Accepts a stream of Points on a route being traversed, returning a
     * RouteSummary when traversal is completed.
     *
     * @generated from protobuf rpc: RecordRoute
     */
    recordRoute(options?: RpcOptions): ClientStreamingCall<Point, RouteSummary>;
    /**
     * A Bidirectional streaming RPC.
     *
     * Accepts a stream of RouteNotes sent while a route is being traversed,
     * while receiving other RouteNotes (e.g. from other users).
     *
     * @generated from protobuf rpc: RouteChat
     */
    routeChat(options?: RpcOptions): DuplexStreamingCall<RouteNote, RouteNote>;
}
