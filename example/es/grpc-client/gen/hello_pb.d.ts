// @generated by protoc-gen-es v2.6.0 with parameter "target=js+dts,import_extension=.js,js_import_style=module,json_types=true"
// @generated from file hello.proto (package example, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import type { Decimal, DecimalJson } from "./google/type/decimal_pb.js";

/**
 * Describes the file hello.proto.
 */
export declare const file_hello: GenFile;

/**
 * @generated from message example.HelloRequest
 */
export declare type HelloRequest = Message<"example.HelloRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: int32 age = 2;
   */
  age: number;

  /**
   * @generated from field: google.protobuf.Timestamp created_time = 3;
   */
  createdTime?: Timestamp;

  /**
   * @generated from field: google.type.Decimal amount = 4;
   */
  amount?: Decimal;
};

/**
 * @generated from message example.HelloRequest
 */
export declare type HelloRequestJson = {
  /**
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * @generated from field: int32 age = 2;
   */
  age?: number;

  /**
   * @generated from field: google.protobuf.Timestamp created_time = 3;
   */
  createdTime?: TimestampJson;

  /**
   * @generated from field: google.type.Decimal amount = 4;
   */
  amount?: DecimalJson;
};

/**
 * Describes the message example.HelloRequest.
 * Use `create(HelloRequestSchema)` to create a new message.
 */
export declare const HelloRequestSchema: GenMessage<HelloRequest, {jsonType: HelloRequestJson}>;

/**
 * @generated from message example.HelloReply
 */
export declare type HelloReply = Message<"example.HelloReply"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * @generated from message example.HelloReply
 */
export declare type HelloReplyJson = {
  /**
   * @generated from field: string message = 1;
   */
  message?: string;
};

/**
 * Describes the message example.HelloReply.
 * Use `create(HelloReplySchema)` to create a new message.
 */
export declare const HelloReplySchema: GenMessage<HelloReply, {jsonType: HelloReplyJson}>;

/**
 * Points are represented as latitude-longitude pairs in the E7 representation
 * (degrees multiplied by 10**7 and rounded to the nearest integer).
 * Latitudes should be in the range +/- 90 degrees and longitude should be in
 * the range +/- 180 degrees (inclusive).
 *
 * @generated from message example.Point
 */
export declare type Point = Message<"example.Point"> & {
  /**
   * @generated from field: int32 latitude = 1;
   */
  latitude: number;

  /**
   * @generated from field: int32 longitude = 2;
   */
  longitude: number;
};

/**
 * Points are represented as latitude-longitude pairs in the E7 representation
 * (degrees multiplied by 10**7 and rounded to the nearest integer).
 * Latitudes should be in the range +/- 90 degrees and longitude should be in
 * the range +/- 180 degrees (inclusive).
 *
 * @generated from message example.Point
 */
export declare type PointJson = {
  /**
   * @generated from field: int32 latitude = 1;
   */
  latitude?: number;

  /**
   * @generated from field: int32 longitude = 2;
   */
  longitude?: number;
};

/**
 * Describes the message example.Point.
 * Use `create(PointSchema)` to create a new message.
 */
export declare const PointSchema: GenMessage<Point, {jsonType: PointJson}>;

/**
 * A latitude-longitude rectangle, represented as two diagonally opposite
 * points "lo" and "hi".
 *
 * @generated from message example.Rectangle
 */
export declare type Rectangle = Message<"example.Rectangle"> & {
  /**
   * One corner of the rectangle.
   *
   * @generated from field: example.Point lo = 1;
   */
  lo?: Point;

  /**
   * The other corner of the rectangle.
   *
   * @generated from field: example.Point hi = 2;
   */
  hi?: Point;
};

/**
 * A latitude-longitude rectangle, represented as two diagonally opposite
 * points "lo" and "hi".
 *
 * @generated from message example.Rectangle
 */
export declare type RectangleJson = {
  /**
   * One corner of the rectangle.
   *
   * @generated from field: example.Point lo = 1;
   */
  lo?: PointJson;

  /**
   * The other corner of the rectangle.
   *
   * @generated from field: example.Point hi = 2;
   */
  hi?: PointJson;
};

/**
 * Describes the message example.Rectangle.
 * Use `create(RectangleSchema)` to create a new message.
 */
export declare const RectangleSchema: GenMessage<Rectangle, {jsonType: RectangleJson}>;

/**
 * A feature names something at a given point.
 *
 * If a feature could not be named, the name is empty.
 *
 * @generated from message example.Feature
 */
export declare type Feature = Message<"example.Feature"> & {
  /**
   * The name of the feature.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The point where the feature is detected.
   *
   * @generated from field: example.Point location = 2;
   */
  location?: Point;
};

/**
 * A feature names something at a given point.
 *
 * If a feature could not be named, the name is empty.
 *
 * @generated from message example.Feature
 */
export declare type FeatureJson = {
  /**
   * The name of the feature.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The point where the feature is detected.
   *
   * @generated from field: example.Point location = 2;
   */
  location?: PointJson;
};

/**
 * Describes the message example.Feature.
 * Use `create(FeatureSchema)` to create a new message.
 */
export declare const FeatureSchema: GenMessage<Feature, {jsonType: FeatureJson}>;

/**
 * A RouteNote is a message sent while at a given point.
 *
 * @generated from message example.RouteNote
 */
export declare type RouteNote = Message<"example.RouteNote"> & {
  /**
   * The location from which the message is sent.
   *
   * @generated from field: example.Point location = 1;
   */
  location?: Point;

  /**
   * The message to be sent.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * A RouteNote is a message sent while at a given point.
 *
 * @generated from message example.RouteNote
 */
export declare type RouteNoteJson = {
  /**
   * The location from which the message is sent.
   *
   * @generated from field: example.Point location = 1;
   */
  location?: PointJson;

  /**
   * The message to be sent.
   *
   * @generated from field: string message = 2;
   */
  message?: string;
};

/**
 * Describes the message example.RouteNote.
 * Use `create(RouteNoteSchema)` to create a new message.
 */
export declare const RouteNoteSchema: GenMessage<RouteNote, {jsonType: RouteNoteJson}>;

/**
 * A RouteSummary is received in response to a RecordRoute rpc.
 *
 * It contains the number of individual points received, the number of
 * detected features, and the total distance covered as the cumulative sum of
 * the distance between each point.
 *
 * @generated from message example.RouteSummary
 */
export declare type RouteSummary = Message<"example.RouteSummary"> & {
  /**
   * The number of points received.
   *
   * @generated from field: int32 point_count = 1;
   */
  pointCount: number;

  /**
   * The number of known features passed while traversing the route.
   *
   * @generated from field: int32 feature_count = 2;
   */
  featureCount: number;

  /**
   * The distance covered in metres.
   *
   * @generated from field: int32 distance = 3;
   */
  distance: number;

  /**
   * The duration of the traversal in seconds.
   *
   * @generated from field: int32 elapsed_time = 4;
   */
  elapsedTime: number;
};

/**
 * A RouteSummary is received in response to a RecordRoute rpc.
 *
 * It contains the number of individual points received, the number of
 * detected features, and the total distance covered as the cumulative sum of
 * the distance between each point.
 *
 * @generated from message example.RouteSummary
 */
export declare type RouteSummaryJson = {
  /**
   * The number of points received.
   *
   * @generated from field: int32 point_count = 1;
   */
  pointCount?: number;

  /**
   * The number of known features passed while traversing the route.
   *
   * @generated from field: int32 feature_count = 2;
   */
  featureCount?: number;

  /**
   * The distance covered in metres.
   *
   * @generated from field: int32 distance = 3;
   */
  distance?: number;

  /**
   * The duration of the traversal in seconds.
   *
   * @generated from field: int32 elapsed_time = 4;
   */
  elapsedTime?: number;
};

/**
 * Describes the message example.RouteSummary.
 * Use `create(RouteSummarySchema)` to create a new message.
 */
export declare const RouteSummarySchema: GenMessage<RouteSummary, {jsonType: RouteSummaryJson}>;

/**
 * @generated from service example.HelloService
 */
export declare const HelloService: GenService<{
  /**
   * @generated from rpc example.HelloService.SayHello
   */
  sayHello: {
    methodKind: "unary";
    input: typeof HelloRequestSchema;
    output: typeof HelloReplySchema;
  },
  /**
   * A server-to-client streaming RPC.
   *
   * Obtains the Features available within the given Rectangle.  Results are
   * streamed rather than returned at once (e.g. in a response message with a
   * repeated field), as the rectangle may cover a large area and contain a
   * huge number of features.
   *
   * @generated from rpc example.HelloService.ListFeatures
   */
  listFeatures: {
    methodKind: "server_streaming";
    input: typeof RectangleSchema;
    output: typeof FeatureSchema;
  },
  /**
   * A client-to-server streaming RPC.
   *
   * Accepts a stream of Points on a route being traversed, returning a
   * RouteSummary when traversal is completed.
   *
   * @generated from rpc example.HelloService.RecordRoute
   */
  recordRoute: {
    methodKind: "client_streaming";
    input: typeof PointSchema;
    output: typeof RouteSummarySchema;
  },
  /**
   * A Bidirectional streaming RPC.
   *
   * Accepts a stream of RouteNotes sent while a route is being traversed,
   * while receiving other RouteNotes (e.g. from other users).
   *
   * @generated from rpc example.HelloService.RouteChat
   */
  routeChat: {
    methodKind: "bidi_streaming";
    input: typeof RouteNoteSchema;
    output: typeof RouteNoteSchema;
  },
}>;

