syntax = "proto3";

package example;

option go_package = ".;example";
import "google/protobuf/timestamp.proto";
import "google/type/decimal.proto";
import "google/rpc/error_details.proto";
import "google/api/annotations.proto";
import "google/api/http.proto";

service HelloService {
  rpc SayHello (HelloRequest) returns (HelloReply){
    option (google.api.http) = {
      get: "/v1/example/say_hello"
    };
  }
  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

enum NotificationType {
  NOTIFICATION_TYPE_UNKNOWN = 0;
  NOTIFICATION_TYPE_EMAIL = 1;
  NOTIFICATION_TYPE_LINE = 2;
  NOTIFICATION_TYPE_MESSENGER = 3;
  NOTIFICATION_TYPE_BEEDING = 4;
}

enum NotificationMessageType {
  NOTIFICATION_MESSAGE_TYPE_UNKNOWN = 0;
  NOTIFICATION_MESSAGE_TYPE_ORDERSTATUS = 1; // 訂單狀態
  NOTIFICATION_MESSAGE_TYPE_ORDERQA = 2; // 訂單問與答
  NOTIFICATION_MESSAGE_TYPE_PRODUCTQA = 3; // `商品問與答`
  NOTIFICATION_MESSAGE_TYPE_STOCKNOTIFICATION = 4; // 商品庫存
  NOTIFICATION_MESSAGE_TYPE_CARTREMINDER = 5; // 購物車提醒
  NOTIFICATION_MESSAGE_TYPE_REWARDPOINTREMINDER = 6; // 購物金提醒
  NOTIFICATION_MESSAGE_TYPE_GROUPBUY = 7; // 湊湊團相關通知
}

message MessageOrderStatus {
  string store_name = 1;
  string store_url = 2;
  string order_no = 3;
  string order_url = 4;
  string order_status = 5;
}

message MessageOrderQA {
  string store_name = 1;
  string store_url = 2;
  string order_no = 3;
  string order_url = 4;
  string reply = 5;
}

message MessageProductQA {
  string store_name = 1;
  string store_url = 2;
  string product_url = 3;
  string reply_txt = 4;
  string recipient_email = 5;
}

message MessageStockNotification {
  string store_name = 1;
  string store_url = 2;
  string product_name = 3;
  string product_id = 4;
}

message MessageCartReminderCartItem {
  string img_src = 1;
  string name = 2;
}

message MessageCartReminder{
  string store_logo = 1;
  string member_name = 2;
  repeated MessageCartReminderCartItem cart_items = 3;
  string store_url = 4;
  string recipient_email = 5;
  string cancel_url = 6;
}

message MessageRewardPointReminder{
  string store_name = 1;
  string currency = 2;
  string points = 3;
  string timezone = 4;
  string end_time = 5;
  string activity_name = 6;
  string store_url = 7;
  string recipient_email = 8;
  string cancel_url = 9;
}

message MessageGroupBuyProductItem {
  string img_src = 1;
  string name = 2;
  string variant = 3;
  int64 num = 4;
  string price = 5;
  string total_price = 6;
}

message MessageGroupBuy {
  string store_logo = 1;
  repeated MessageGroupBuyProductItem product_items = 2;
  string store_name = 3;
  string store_url = 4;
  string product_id = 5;
  string group_buy_id = 6;
  string group_buy_title = 7;
  string final_price = 8;
  string id = 9;
  string order_no = 10;
  string product_total = 11;
  string discount = 12;
  string shipment_fee = 13;
  string paying_fee = 14;
  string order_price = 15;
  bool is_payment = 16;
}

message NotifyContent {
  repeated NotificationType notification_type = 1;
  NotificationMessageType notification_message_type = 2;
  string store_id = 3;
  string recipient_meepshop_user_id = 4;
  string sender_address = 5;
  string sender_name = 6;
  oneof message_content {
    MessageOrderStatus order_status = 7;
    MessageOrderQA order_qa = 8;
    MessageProductQA product_qa = 9;
    MessageStockNotification stock_notification = 10;
    MessageCartReminder cart_reminder = 11;
    MessageRewardPointReminder reward_point_reminder = 12;
    MessageGroupBuy group_buy = 13;
  }
}

message HelloRequest {
  string name = 1;
  int32 age = 2;
  repeated string tags = 3;
  google.protobuf.Timestamp created_time = 4;
  google.type.Decimal amount = 5;
  repeated NotificationType notification_type = 6;
}
message HelloReply {
  string message = 1;
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  // One corner of the rectangle.
  Point lo = 1;

  // The other corner of the rectangle.
  Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;

  // The point where the feature is detected.
  Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
  Point location = 1;

  // The message to be sent.
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}
