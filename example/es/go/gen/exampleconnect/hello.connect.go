// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: hello.proto

package exampleconnect

import (
	__ "."
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HelloServiceName is the fully-qualified name of the HelloService service.
	HelloServiceName = "example.HelloService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HelloServiceSayHelloProcedure is the fully-qualified name of the HelloService's SayHello RPC.
	HelloServiceSayHelloProcedure = "/example.HelloService/SayHello"
	// HelloServiceListFeaturesProcedure is the fully-qualified name of the HelloService's ListFeatures
	// RPC.
	HelloServiceListFeaturesProcedure = "/example.HelloService/ListFeatures"
	// HelloServiceRecordRouteProcedure is the fully-qualified name of the HelloService's RecordRoute
	// RPC.
	HelloServiceRecordRouteProcedure = "/example.HelloService/RecordRoute"
	// HelloServiceRouteChatProcedure is the fully-qualified name of the HelloService's RouteChat RPC.
	HelloServiceRouteChatProcedure = "/example.HelloService/RouteChat"
)

// HelloServiceClient is a client for the example.HelloService service.
type HelloServiceClient interface {
	SayHello(context.Context, *connect.Request[__.HelloRequest]) (*connect.Response[__.HelloReply], error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(context.Context, *connect.Request[__.Rectangle]) (*connect.ServerStreamForClient[__.Feature], error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(context.Context) *connect.ClientStreamForClient[__.Point, __.RouteSummary]
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(context.Context) *connect.BidiStreamForClient[__.RouteNote, __.RouteNote]
}

// NewHelloServiceClient constructs a client for the example.HelloService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHelloServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HelloServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	helloServiceMethods := __.File_hello_proto.Services().ByName("HelloService").Methods()
	return &helloServiceClient{
		sayHello: connect.NewClient[__.HelloRequest, __.HelloReply](
			httpClient,
			baseURL+HelloServiceSayHelloProcedure,
			connect.WithSchema(helloServiceMethods.ByName("SayHello")),
			connect.WithClientOptions(opts...),
		),
		listFeatures: connect.NewClient[__.Rectangle, __.Feature](
			httpClient,
			baseURL+HelloServiceListFeaturesProcedure,
			connect.WithSchema(helloServiceMethods.ByName("ListFeatures")),
			connect.WithClientOptions(opts...),
		),
		recordRoute: connect.NewClient[__.Point, __.RouteSummary](
			httpClient,
			baseURL+HelloServiceRecordRouteProcedure,
			connect.WithSchema(helloServiceMethods.ByName("RecordRoute")),
			connect.WithClientOptions(opts...),
		),
		routeChat: connect.NewClient[__.RouteNote, __.RouteNote](
			httpClient,
			baseURL+HelloServiceRouteChatProcedure,
			connect.WithSchema(helloServiceMethods.ByName("RouteChat")),
			connect.WithClientOptions(opts...),
		),
	}
}

// helloServiceClient implements HelloServiceClient.
type helloServiceClient struct {
	sayHello     *connect.Client[__.HelloRequest, __.HelloReply]
	listFeatures *connect.Client[__.Rectangle, __.Feature]
	recordRoute  *connect.Client[__.Point, __.RouteSummary]
	routeChat    *connect.Client[__.RouteNote, __.RouteNote]
}

// SayHello calls example.HelloService.SayHello.
func (c *helloServiceClient) SayHello(ctx context.Context, req *connect.Request[__.HelloRequest]) (*connect.Response[__.HelloReply], error) {
	return c.sayHello.CallUnary(ctx, req)
}

// ListFeatures calls example.HelloService.ListFeatures.
func (c *helloServiceClient) ListFeatures(ctx context.Context, req *connect.Request[__.Rectangle]) (*connect.ServerStreamForClient[__.Feature], error) {
	return c.listFeatures.CallServerStream(ctx, req)
}

// RecordRoute calls example.HelloService.RecordRoute.
func (c *helloServiceClient) RecordRoute(ctx context.Context) *connect.ClientStreamForClient[__.Point, __.RouteSummary] {
	return c.recordRoute.CallClientStream(ctx)
}

// RouteChat calls example.HelloService.RouteChat.
func (c *helloServiceClient) RouteChat(ctx context.Context) *connect.BidiStreamForClient[__.RouteNote, __.RouteNote] {
	return c.routeChat.CallBidiStream(ctx)
}

// HelloServiceHandler is an implementation of the example.HelloService service.
type HelloServiceHandler interface {
	SayHello(context.Context, *connect.Request[__.HelloRequest]) (*connect.Response[__.HelloReply], error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(context.Context, *connect.Request[__.Rectangle], *connect.ServerStream[__.Feature]) error
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(context.Context, *connect.ClientStream[__.Point]) (*connect.Response[__.RouteSummary], error)
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(context.Context, *connect.BidiStream[__.RouteNote, __.RouteNote]) error
}

// NewHelloServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHelloServiceHandler(svc HelloServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	helloServiceMethods := __.File_hello_proto.Services().ByName("HelloService").Methods()
	helloServiceSayHelloHandler := connect.NewUnaryHandler(
		HelloServiceSayHelloProcedure,
		svc.SayHello,
		connect.WithSchema(helloServiceMethods.ByName("SayHello")),
		connect.WithHandlerOptions(opts...),
	)
	helloServiceListFeaturesHandler := connect.NewServerStreamHandler(
		HelloServiceListFeaturesProcedure,
		svc.ListFeatures,
		connect.WithSchema(helloServiceMethods.ByName("ListFeatures")),
		connect.WithHandlerOptions(opts...),
	)
	helloServiceRecordRouteHandler := connect.NewClientStreamHandler(
		HelloServiceRecordRouteProcedure,
		svc.RecordRoute,
		connect.WithSchema(helloServiceMethods.ByName("RecordRoute")),
		connect.WithHandlerOptions(opts...),
	)
	helloServiceRouteChatHandler := connect.NewBidiStreamHandler(
		HelloServiceRouteChatProcedure,
		svc.RouteChat,
		connect.WithSchema(helloServiceMethods.ByName("RouteChat")),
		connect.WithHandlerOptions(opts...),
	)
	return "/example.HelloService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HelloServiceSayHelloProcedure:
			helloServiceSayHelloHandler.ServeHTTP(w, r)
		case HelloServiceListFeaturesProcedure:
			helloServiceListFeaturesHandler.ServeHTTP(w, r)
		case HelloServiceRecordRouteProcedure:
			helloServiceRecordRouteHandler.ServeHTTP(w, r)
		case HelloServiceRouteChatProcedure:
			helloServiceRouteChatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHelloServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHelloServiceHandler struct{}

func (UnimplementedHelloServiceHandler) SayHello(context.Context, *connect.Request[__.HelloRequest]) (*connect.Response[__.HelloReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.HelloService.SayHello is not implemented"))
}

func (UnimplementedHelloServiceHandler) ListFeatures(context.Context, *connect.Request[__.Rectangle], *connect.ServerStream[__.Feature]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("example.HelloService.ListFeatures is not implemented"))
}

func (UnimplementedHelloServiceHandler) RecordRoute(context.Context, *connect.ClientStream[__.Point]) (*connect.Response[__.RouteSummary], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.HelloService.RecordRoute is not implemented"))
}

func (UnimplementedHelloServiceHandler) RouteChat(context.Context, *connect.BidiStream[__.RouteNote, __.RouteNote]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("example.HelloService.RouteChat is not implemented"))
}
